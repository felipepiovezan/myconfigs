" It's VIM, not VI
set nocompatible

"""""""""""""" Colorscheme options """"""""""""""
" Add colorscheme before the trick below for trailing whitespaces/long lines.
set background=dark
colorscheme solarized

" Seems to work best with transparent terminals
set backspace=indent,eol,start

"""""""""""""" Tab(\t) behavior options """"""""""""""
" A tab produces a 2-space indentation
set softtabstop=2
set shiftwidth=2
set expandtab
" Add and delete spaces in increments of `shiftwidth' for tabs
set smarttab

" Set a few indentation parameters. See the VIM help for cinoptions-values for
" details.  These aren't absolute rules; they're just an approximation of
" common style in LLVM source.
set cinoptions=:0,g0,(0,Ws,l1

"""""""""""""" File based syntax options """"""""""""""

" Enable filetype detection
filetype on

" Highlight syntax in programming languages
syntax on

" Syntax detection
augroup filetype
  au! BufRead,BufNewFile *Makefile* set filetype=make
  au! BufRead,BufNewFile *.ll     set filetype=llvm
  au! BufRead,BufNewFile *.td     set filetype=tablegen
  au! BufRead,BufNewFile *.rst     set filetype=rest
  au! BufNewFile,BufRead *.cl  set filetype=opencl
  au! BufRead,BufNewFile *.csl set filetype=csl
augroup END

augroup pandoc_syntax
  au! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
augroup END

" In Makefiles, don't expand tabs to spaces, since we need the actual tabs
autocmd FileType make set noexpandtab

" Correct python indentation.
function! SetupPython()
  " Here, you can have the final say on what is set.  So
  " fixup any settings you don't like.
  setlocal softtabstop=2
  setlocal tabstop=2
  setlocal shiftwidth=2
endfunction
command! -bar SetupPython call SetupPython()

" C/C++ programming helpers
augroup csrc
  au!
  autocmd FileType *      set nocindent smartindent
  autocmd FileType c,cpp  set cindent
augroup END

"""""""""""""" Appearance options """"""""""""""

" Highlight trailing whitespace.
highlight WhitespaceEOL ctermbg=DarkYellow guibg=DarkYellow
if v:version >= 702
  " Whitespace at the end of a line. This little dance suppresses
  " whitespace that has just been typed.
  au BufWinEnter * let w:m1=matchadd('WhitespaceEOL', '\s\+$', -1)
  au InsertEnter * call matchdelete(w:m1)
  au InsertEnter * let w:m2=matchadd('WhitespaceEOL', '\s\+\%#\@<!$', -1)
  au InsertLeave * call matchdelete(w:m2)
  au InsertLeave * let w:m1=matchadd('WhitespaceEOL', '\s\+$', -1)
else
endif

" show the cursor position all the time
set ruler

" Show linenumbers.
set number
set relativenumber

" Highlight search results with F4
noremap <F4> :set hlsearch! hlsearch?<CR>

" Highline current line.
set cursorline
"""""""""""""" Vim tabs options """"""""""""""

" Increase max num of tabs
set tabpagemax=50

" Shortcuts for changing tabs
set ttimeoutlen=0
noremap! <C-h> <Esc>:tabprevious<CR>i
noremap  <C-h> <Esc>:tabprevious<CR>
noremap! <C-l> <Esc>:tabnext<CR>i
noremap  <C-l> <Esc>:tabnext<CR>

"""""""""""""" Copy/Pasting options """"""""""""""

" Shortcut for selection clipboard copy/pasting.
" Leader is usually mapped to '\'
noremap <Leader>y "*y
noremap <Leader>p "*p

" Make shift-insert work like in Xterm
if has('gui_running')
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>
endif

"""""""""""""" File name completion options """"""""""""""

" Ignore files with these extensions.
set suffixes+=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx
set suffixes+=.ilg,.inx,.out,.toc,.png,.jpg

"""""""""""""" Cursor options """"""""""""""

" Enable moving the cursor in all modes.
set mouse=a
if &diff
  " diff mode
  set diffopt+=iwhite
endif

"""""""""""""" Code formatting options """"""""""""""

map <C-K> :py3f /cb/tools/llvm/latest/share/clang/clang-format.py<cr>
imap <C-K> <c-o> :py3f/cb/tools/llvm/latest/share/clang/clang-format.py<cr>

"""""""""""""" Cross session options """"""""""""""

" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo

" Setup function to remember where we were
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
  endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

"""""""""""""""""""""" Tagbar options
" Open/close:
nmap <F3> :TagbarToggle<CR>

"""""""""""""""""""""" Powerline options
let g:powerline_pycmd="py3"

"""""""""""""""""""""" Autoformat options
noremap <F2> :Autoformat<CR>
" Enable formatting on save:
" au BufWrite * :Autoformat
" Disable fallback to vim formatting:
" let g:autoformat_retab = 0
" let g:autoformat_autoindent = 0
" let g:autoformat_remove_trailing_spaces = 0
" Disable fallback autoindent for filetypes with incompetent autoindent:
autocmd FileType vim,tex let b:autoformat_autoindent=0

"""""""""""""""""""""" Fzf options
map <C-P> :Files <cr>
let g:fzf_action = {
  \ 'enter' :  'tab split',
  \ 'ctrl-t' : 'tab split',
  \ 'ctrl-x' : 'split',
  \ 'ctrl-v' : 'vsplit' }

"""""""""""""""""""""" Git helpers
" Add "Blame" command to open the result of git blame on the currently opened
" buffer.
" Note: '#' expands to the previous buffer name.
command Blame tabnew|read !git blame #
" Set line-wrap at 72 characters for commit messages.
au FileType gitcommit setlocal tw=72
" Set spell checking for commits.
au FileType gitcommit set spell

"""""""""""""""""""""" Word swapping shortcuts:
" swap the current word with the next, without changing cursor position:
:nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>:nohlsearch<CR>
" swap the current word with the next, keep cursor in current word:
:nnoremap <silent> gl "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>:nohlsearch<CR>
" swap the current word with the previous, keep cursor in current word:
:nnoremap <silent> gr "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>/\w\+\_W\+<CR><c-l>:nohlsearch<CR>

"""""""""""""""""""""" YouCompleteMe shortcuts:
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
nnoremap <F1> :tab split \| YcmCompleter GoToDefinition<CR>
